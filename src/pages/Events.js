import React, { useState } from 'react';
import { Button, Alert, Snackbar } from '@mui/material';
import { Add } from '@mui/icons-material';
import DataTable from '../components/DataTable';
import ModalPublicationForm from '../components/ModalPublicationForm';
import PageHeader from '../components/PageHeader';
import { useAuth } from '../hooks/useAuth';
import { useNavigate } from 'react-router-dom';
import { useResidence } from '../context/ResidenceContext';

const mockEvents = [
  { 
    id: 1, 
    title: 'Assembl√©e g√©n√©rale extraordinaire', 
    description: '<p><strong>Ordre du jour :</strong><br>‚Ä¢ Vote des travaux de r√©fection<br>‚Ä¢ Budget exceptionnel<br>‚Ä¢ Questions diverses</p>',
    eventDate: '2025-06-20', 
    startTime: '18:30', 
    endTime: '20:30',
    location: 'Salle de r√©union (RDC)',
    maxParticipants: 50,
    publicationDate: '2025-06-22T09:00:00', 
    status: 'Publi√©', 
    residence_id: '19f2179b-7d14-f011-998a-6045bd1919a1',
    targetResidences: ['19f2179b-7d14-f011-998a-6045bd1919a1'],
    targetResidenceNames: ['ECLA GENEVE ARCHAMPS']
  },
  { 
    id: 2, 
    title: 'Cours de yoga collectif', 
    description: '<p>S√©ance de yoga pour tous niveaux avec <em>Marie</em>, professeure certifi√©e.<br><br>Apportez votre tapis ! üßò‚Äç‚ôÄÔ∏è</p>',
    eventDate: '2025-06-05', 
    startTime: '19:00', 
    endTime: '20:00',
    location: 'Jardin commun (si beau temps)',
    maxParticipants: 15,
    publicationDate: '2025-06-20T14:15:00', 
    status: 'Publi√©', 
    residence_id: '195644a8-4fa7-ef11-b8e9-6045bd19a503',
    targetResidences: ['195644a8-4fa7-ef11-b8e9-6045bd19a503', '1b5644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA MASSY-PALAISEAU', 'ECLA NOISY-LE-GRAND']
  },
  { 
    id: 3, 
    title: 'Atelier cuisine enfants', 
    description: '<p>Les petits chefs en herbe vont pr√©parer des <strong>cookies de No√´l</strong> ! üë®‚Äçüç≥</p>',
    eventDate: '2025-06-18', 
    startTime: '14:00', 
    endTime: '16:30',
    location: 'Cuisine commune',
    maxParticipants: 8,
    publicationDate: '2025-06-10T10:00:00', 
    status: 'Programm√©', 
    residence_id: '1b5644a8-4fa7-ef11-b8e9-6045bd19a503',
    targetResidences: ['1b5644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA NOISY-LE-GRAND']
  },
  { 
    id: 4, 
    title: 'Soir√©e film en plein air', 
    description: '<p>Projection du film <em>"Le Grand Bleu"</em> dans le jardin.<br>Popcorn et boissons offerts ! üçø</p>',
    eventDate: '2025-06-08', 
    startTime: '20:00', 
    endTime: '22:30',
    location: 'Jardin commun',
    maxParticipants: 30,
    publicationDate: '2025-06-25T16:45:00', 
    status: 'Brouillon', 
    residence_id: '195644a8-4fa7-ef11-b8e9-6045bd19a503',
    targetResidences: ['195644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA MASSY-PALAISEAU']
  },
  { 
    id: 5, 
    title: 'Vide-grenier des r√©sidents', 
    description: '<p>Grande braderie entre voisins ! Livres, v√™tements, objets de d√©coration...<br><br>Inscription obligatoire pour tenir un stand.</p>',
    eventDate: '2025-06-15', 
    startTime: '09:00', 
    endTime: '17:00',
    location: 'Parking sous-sol',
    maxParticipants: 100,
    publicationDate: '2025-06-30T08:00:00', 
    status: 'Brouillon', 
    residence_id: '19f2179b-7d14-f011-998a-6045bd1919a1',
    targetResidences: ['19f2179b-7d14-f011-998a-6045bd1919a1', '195644a8-4fa7-ef11-b8e9-6045bd19a503', '1b5644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA GENEVE ARCHAMPS', 'ECLA MASSY-PALAISEAU', 'ECLA NOISY-LE-GRAND']
  },
  { 
    id: 6, 
    title: 'F√™te d\'Halloween 2025', 
    description: '<p>Soir√©e d√©guis√©e pour petits et grands ! üéÉ<br>Concours du meilleur costume avec prix √† la cl√©.</p>',
    eventDate: '2025-06-31', 
    startTime: '18:00', 
    endTime: '21:00',
    location: 'Hall d\'entr√©e',
    maxParticipants: 40,
    publicationDate: '2025-06-15T12:00:00', 
    status: 'Archiv√©', 
    residence_id: '1b5644a8-4fa7-ef11-b8e9-6045bd19a503',
    targetResidences: ['1b5644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA NOISY-LE-GRAND']
  },
  { 
    id: 7, 
    title: 'Maintenance collective v√©los', 
    description: '<p>Atelier r√©paration et entretien v√©los avec <strong>Pierre</strong>, m√©canicien b√©n√©vole.</p>',
    eventDate: '2025-06-12', 
    startTime: '10:00', 
    endTime: '12:00',
    location: 'Local v√©los',
    maxParticipants: 6,
    publicationDate: '2025-06-28T15:30:00', 
    status: 'Publi√©', 
    residence_id: '195644a8-4fa7-ef11-b8e9-6045bd19a503',
    targetResidences: ['195644a8-4fa7-ef11-b8e9-6045bd19a503'],
    targetResidenceNames: ['ECLA MASSY-PALAISEAU']
  }
];

export default function Events() {
  const { ensureAuthenticated, authenticatedPost, authorizedResidences } = useAuth();
  const { currentResidenceId, currentResidenceName } = useResidence();
  const [openModal, setOpenModal] = useState(false);
  const [events, setEvents] = useState(mockEvents);
  const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });
  const navigate = useNavigate();

  const columns = [
    { id: 'title', label: 'Titre', sortable: true, searchable: true },
    { id: 'eventDate', label: 'Date de l\'√©v√©nement', sortable: true, searchable: false },
    { id: 'targetResidenceNames', label: 'R√©sidences', sortable: false, searchable: false },
    { id: 'location', label: 'Lieu', sortable: false, searchable: true },
    { id: 'status', label: 'Statut', sortable: true, searchable: false },
  ];

  const filteredEvents = events.filter(event => {
    return event.targetResidences && event.targetResidences.includes(currentResidenceId);
  });

  const handleAddEvent = async (newEvent) => {
    try {
      ensureAuthenticated('cr√©er un nouvel √©v√©nement');
      
      console.log('‚úÖ Utilisateur authentifi√©, cr√©ation de l\'√©v√©nement...');
      console.log('üìù Donn√©es de l\'√©v√©nement:', newEvent);
      
      if (!newEvent.targetResidences || newEvent.targetResidences.length === 0) {
        throw new Error('Aucune r√©sidence s√©lectionn√©e pour la publication');
      }

      const authorizedIds = authorizedResidences?.map(r => r.residenceId) || [];
      const unauthorizedResidences = newEvent.targetResidences.filter(id => !authorizedIds.includes(id));
      
      if (unauthorizedResidences.length > 0) {
        console.error('üö® S√âCURIT√â: Tentative de publication dans des r√©sidences non autoris√©es:', unauthorizedResidences);
        throw new Error('Vous n\'√™tes pas autoris√© √† publier dans certaines r√©sidences s√©lectionn√©es');
      }
      
      const result = await authenticatedPost('/api/events', newEvent);
      
      console.log('‚úÖ √âv√©nement cr√©√© avec succ√®s:', result);
      
      const eventWithId = { 
        ...newEvent, 
        id: Date.now(),
        residence_id: currentResidenceId
      };
      setEvents(prev => [...prev, eventWithId]);
      
      setOpenModal(false);
      const residenceCount = newEvent.targetResidences.length;
      setNotification({
        open: true,
        message: `√âv√©nement cr√©√© avec succ√®s et publi√© dans ${residenceCount} r√©sidence${residenceCount > 1 ? 's' : ''} !`,
        severity: 'success'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
      
      let errorMessage = 'Erreur lors de la cr√©ation de l\'√©v√©nement';
      
      if (error.code === 'UNAUTHENTICATED') {
        errorMessage = 'Vous devez √™tre connect√© pour cr√©er un √©v√©nement';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setNotification({
        open: true,
        message: errorMessage,
        severity: 'error'
      });
    }
  };

  const handleNewEventClick = () => {
    try {
      ensureAuthenticated('cr√©er un nouvel √©v√©nement');
      
      if (!authorizedResidences || authorizedResidences.length === 0) {
        setNotification({
          open: true,
          message: 'Aucune r√©sidence autoris√©e trouv√©e pour la cr√©ation d\'√©v√©nements',
          severity: 'warning'
        });
        return;
      }
      
      setOpenModal(true);
    } catch (error) {
      console.error('‚ùå Utilisateur non authentifi√©:', error);
      setNotification({
        open: true,
        message: 'Vous devez √™tre connect√© pour cr√©er un √©v√©nement',
        severity: 'error'
      });
    }
  };

  const handleRowClick = (event, navigate) => {
    navigate(`/events/${event.id}`);
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  return (
    <>
      <PageHeader
        title="√âv√©nements de ma r√©sidence"
        subtitle={`G√©rez les √©v√©nements de ${currentResidenceName || 'votre r√©sidence'}`}
        breadcrumbs={[
          { label: 'Dashboard', href: '/' },
          { label: '√âv√©nements', href: '/events' }
        ]}
        actions={[
          {
            label: 'Nouveau √âv√©nement',
            icon: <Add />,
            variant: 'contained',
            props: {
              onClick: handleNewEventClick
            }
          }
        ]}
        stats={[
          { label: '√âv√©nements actifs', value: filteredEvents.filter(e => e.status === 'Publi√©').length.toString() },
          { label: 'Total √©v√©nements', value: filteredEvents.length.toString() }
        ]}
      />

      <DataTable 
        title="√âv√©nements de ma r√©sidence" 
        data={filteredEvents} 
        columns={columns} 
        onRowClick={handleRowClick}
      />

      <ModalPublicationForm
        open={openModal}
        handleClose={() => setOpenModal(false)}
        onSubmit={handleAddEvent}
        entityName="√âv√©nement"
        fields={[
          { name: 'title', label: 'Titre de l\'√©v√©nement', type: 'text', required: true },
          { name: 'description', label: 'Description', type: 'richtext', required: true },
          { name: 'eventDate', label: 'Date de l\'√©v√©nement', type: 'date', required: true },
          { name: 'startTime', label: 'Heure de d√©but', type: 'time', required: true },
          { name: 'endTime', label: 'Heure de fin', type: 'time' },
          { name: 'location', label: 'Lieu', type: 'text', required: true },
          { name: 'maxParticipants', label: 'Nombre max de participants', type: 'number' },
          { name: 'targetResidences', label: 'R√©sidences cibles', type: 'multiselect', required: true }
        ]}
      />

      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert 
          onClose={handleCloseNotification} 
          severity={notification.severity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </>
  );
}
